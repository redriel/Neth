package com.blinc.neth;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class SignUpRegistry extends Contract {
    private static final String BINARY = "60806040523480156200001157600080fd5b5060405160408062001dd5833981018060405262000033919081019062000293565b600180546001600160a01b03199081166001600160a01b03848116919091178355600080549092168582161782556040805160a081018252848152602080820186815233838501818152606080860189815260808701828152938a52600280875297909920865181549551935160ff199096169015151761ff001916610100931515939093029290921762010000600160b01b031916620100009490981693909302969096178655955196850196909655935180519194620000fb9385019291019062000108565b50905050505050620002fb565b8280548282559060005260206000209081019282156200015a579160200282015b828111156200015a5782518051620001499184916020909101906200016c565b509160200191906001019062000129565b5062000168929150620001ed565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001af57805160ff1916838001178555620001df565b82800160010185558215620001df579182015b82811115620001df578251825591602001919060010190620001c2565b506200016892915062000218565b6200021591905b80821115620001685760006200020b828262000235565b50600101620001f4565b90565b6200021591905b808211156200016857600081556001016200021f565b50805460018160011615610100020316600290046000825580601f106200025d57506200027d565b601f0160209004906000526020600020908101906200027d919062000218565b50565b80516200028d81620002e4565b92915050565b60008060408385031215620002a757600080fd5b6000620002b5858562000280565b9250506020620002c88582860162000280565b9150509250929050565b60006001600160a01b0382166200028d565b620002ef81620002d2565b81146200027d57600080fd5b611aca806200030b6000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c8063b3ab15fb1161008c578063dd95806011610066578063dd95806014610196578063e7e50009146101b6578063f06bf019146101c9578063f9e60c30146101dc576100ce565b8063b3ab15fb1461015d578063b47ae13214610170578063b687e3c214610183576100ce565b806213eb4b146100d35780636d70f7ae146100fc578063ab2b3a801461010f578063b07048d914610124578063b14c925a14610137578063b27a2fd91461014a575b600080fd5b6100e66100e13660046112f4565b6101fc565b6040516100f391906118a6565b60405180910390f35b6100e661010a3660046112f4565b61021f565b61012261011d36600461137f565b61026a565b005b6101226101323660046112f4565b610609565b6100e66101453660046113b9565b610790565b6100e661015836600461131a565b6107d7565b61012261016b3660046112f4565b6108fe565b61012261017e36600461131a565b6109be565b610122610191366004611401565b610b17565b6101a96101a43660046112f4565b610d72565b6040516100f39190611895565b6101226101c436600461131a565b610e62565b6101226101d73660046113b9565b610f68565b6101ef6101ea3660046112f4565b6110cd565b6040516100f391906119a0565b6001600160a01b0316600090815260026020526040902054610100900460ff1690565b6001600160a01b03811660009081526002602052604081205460ff16801561026457506001600160a01b038216600090815260026020526040902054610100900460ff165b92915050565b6001600160a01b03821660009081526002602052604090205482908290610100900460ff16156102b857604051600160e51b62461bcd0281526004016102af90611990565b60405180910390fd5b801561045957336000908152600260205260409020805460ff166102f157604051600160e51b62461bcd0281526004016102af90611960565b6001600160a01b038516600090815260026020526040902054610100900460ff161561033257604051600160e51b62461bcd0281526004016102af90611990565b6040805160a0810182528515158152600160208083018281523384860190815260006060808701828152608088018281526001600160a01b038f8116855260028089529a909420895181549751965160ff199098169015151761ff001916610100961515969096029590951762010000600160b01b03191662010000969094169590950292909217835590519482019490945590518051939591936103df9392850192919091019061112c565b50905050841561045257600154604051600160e11b634c386bff0281526001600160a01b03909116908190639870d7fe9061041e908a90600401611887565b600060405180830381600087803b15801561043857600080fd5b505af115801561044c573d6000803e3d6000fd5b50505050505b5050610603565b336000818152600260205260409020906001600160a01b03841614806104805750805460ff165b61049f57604051600160e51b62461bcd0281526004016102af90611960565b6001600160a01b038516600090815260026020526040902054610100900460ff16156104e057604051600160e51b62461bcd0281526004016102af90611990565b6040805160a0810182528515158152600160208083018281523384860190815260006060808701828152608088018281526001600160a01b038f8116855260028089529a909420895181549751965160ff199098169015151761ff001916610100961515969096029590951762010000600160b01b031916620100009690941695909502929092178355905194820194909455905180519395919361058d9392850192919091019061112c565b50905050841561060057600154604051600160e11b634c386bff0281526001600160a01b03909116908190639870d7fe906105cc908a90600401611887565b600060405180830381600087803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b50505050505b50505b50505050565b6001600160a01b0381166000908152600260205260409020548190610100900460ff1661064b57604051600160e51b62461bcd0281526004016102af90611900565b6001600160a01b038116600090815260026020526040902054610100900460ff161561078c57336000818152600260205260409020906001600160a01b03831614806106985750805460ff165b6106b757604051600160e51b62461bcd0281526004016102af90611960565b6001600160a01b038316600090815260026020526040902054610100900460ff166106f757604051600160e51b62461bcd0281526004016102af90611970565b6001600160a01b0383166000908152600260205260409020805461ff00198116825560ff161561060357600154604051600160e11b6356452c250281526001600160a01b0390911690819063ac8a584a90610756908890600401611887565b600060405180830381600087803b15801561077057600080fd5b505af1158015610784573d6000803e3d6000fd5b505050505050505b5050565b6001600160a01b03821660009081526002602052604080822090516003909101906107bc90849061187b565b9081526040519081900360200190205460ff16905092915050565b60006107e2846101fc565b80156107f257506107f2836101fc565b801561080357506108038483610790565b156108dc576001600160a01b038416600090815260026020526040808220905160039091019061083490859061187b565b90815260408051602092819003830190206001600160a01b0387811660009081526003909201909352205416148015906108c757506001600160a01b038416600090815260026020526040808220905160039091019061089590859061187b565b90815260408051602092819003830190206001600160a01b038781166000908152600390920190935220600101541614155b156108d4575060016108f7565b5060006108f7565b604051600160e51b62461bcd0281526004016102af90611930565b9392505050565b336000818152600260205260409020805460ff1661093157604051600160e51b62461bcd0281526004016102af90611960565b6001600160a01b038316600090815260026020526040902054610100900460ff1661097157604051600160e51b62461bcd0281526004016102af90611970565b6001600160a01b0383166000908152600260205260409020805460ff16156109ae57604051600160e51b62461bcd0281526004016102af90611940565b805460ff19166001179055505050565b33600081815260026020526040902083916001600160a01b03831614806109e65750805460ff165b610a0557604051600160e51b62461bcd0281526004016102af90611960565b610a0e856101fc565b8015610a1e5750610a1e846101fc565b8015610a2f5750610a2f8584610790565b15610af557604080516060810182526001600160a01b038087168252871660208083018290528284018790526000918252600290528290209151909160030190610a7a90869061187b565b908152604080519182900360209081019092206001600160a01b0380891660009081526003909201845290829020845181549083166001600160a01b031991821617825585850151600183018054919094169116179091559083015180519192610aec92600285019290910190611189565b50905050610b10565b604051600160e51b62461bcd0281526004016102af90611910565b5050505050565b33600081815260026020526040902084916001600160a01b0383161480610b3f5750805460ff165b610b5e57604051600160e51b62461bcd0281526004016102af90611960565b6001600160a01b038516600090815260026020526040902054610100900460ff16610b9e57604051600160e51b62461bcd0281526004016102af90611950565b60026000866001600160a01b03166001600160a01b0316815260200190815260200160002060030184604051610bd4919061187b565b9081526040519081900360200190205460ff1615610c0757604051600160e51b62461bcd0281526004016102af90611980565b6001600160a01b038516600090815260026020818152604083209091018054600181018083559184529282902087519193610c489391019190880190611189565b50506040805160608101825260018152602080820187905233828401526001600160a01b038816600090815260029091528290209151909160030190610c8f90879061187b565b908152604051602091819003820190208251815460ff19169015151781558282015180519192610cc792600185019290910190611189565b50604091820151600291820180546001600160a01b0319166001600160a01b03928316179055878116600090815260209290925282822060019081018054909101905590549151600160e11b635b91e801028152911690819063b723d00290610d389088908a9089906004016118c5565b600060405180830381600087803b158015610d5257600080fd5b505af1158015610d66573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b03811660009081526002602081815260408084209092018054835181840281018401909452808452606094919290919084015b82821015610e575760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e435780601f10610e1857610100808354040283529160200191610e43565b820191906000526020600020905b815481529060010190602001808311610e2657829003601f168201915b505050505081526020019060010190610dac565b505050509050919050565b33600081815260026020526040902083916001600160a01b0383161480610e8a5750805460ff165b610ea957604051600160e51b62461bcd0281526004016102af90611960565b610eb2856101fc565b8015610ec25750610ec2846101fc565b8015610ed35750610ed38584610790565b156108dc5760026000866001600160a01b03166001600160a01b0316815260200190815260200160002060030183604051610f0e919061187b565b90815260408051602092819003830190206001600160a01b03871660009081526003909101909252812080546001600160a01b03199081168255600182018054909116905590610f616002830182611203565b5050610b10565b33600081815260026020526040902083916001600160a01b0383161480610f905750805460ff165b610faf57604051600160e51b62461bcd0281526004016102af90611960565b6001600160a01b038416600090815260026020526040902054610100900460ff16610fef57604051600160e51b62461bcd0281526004016102af90611950565b60026000856001600160a01b03166001600160a01b0316815260200190815260200160002060030183604051611025919061187b565b9081526040519081900360200190205460ff1661105757604051600160e51b62461bcd0281526004016102af90611920565b6001600160a01b038416600090815260026020526040808220905160039091019061108390869061187b565b908152604051908190036020018120805460ff19168155600054600160e01b636ae751730283529092506001600160a01b0316908190636ae7517390610d389088906004016118b4565b6001600160a01b038116600090815260026020526040812054610100900460ff1661110d57604051600160e51b62461bcd0281526004016102af90611970565b506001600160a01b031660009081526002602052604090206001015490565b828054828255906000526020600020908101928215611179579160200282015b828111156111795782518051611169918491602090910190611189565b509160200191906001019061114c565b5061118592915061124a565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106111ca57805160ff19168380011785556111f7565b828001600101855582156111f7579182015b828111156111f75782518255916020019190600101906111dc565b50611185929150611270565b50805460018160011615610100020316600290046000825580601f106112295750611247565b601f0160209004906000526020600020908101906112479190611270565b50565b61126d91905b808211156111855760006112648282611203565b50600101611250565b90565b61126d91905b808211156111855760008155600101611276565b803561026481611a73565b803561026481611a87565b600082601f8301126112b157600080fd5b81356112c46112bf826119d5565b6119ae565b915080825260208301602083018583830111156112e057600080fd5b6112eb838284611a31565b50505092915050565b60006020828403121561130657600080fd5b6000611312848461128a565b949350505050565b60008060006060848603121561132f57600080fd5b600061133b868661128a565b935050602061134c8682870161128a565b925050604084013567ffffffffffffffff81111561136957600080fd5b611375868287016112a0565b9150509250925092565b6000806040838503121561139257600080fd5b600061139e858561128a565b92505060206113af85828601611295565b9150509250929050565b600080604083850312156113cc57600080fd5b60006113d8858561128a565b925050602083013567ffffffffffffffff8111156113f557600080fd5b6113af858286016112a0565b60008060006060848603121561141657600080fd5b6000611422868661128a565b935050602084013567ffffffffffffffff81111561143f57600080fd5b61134c868287016112a0565b60006108f783836114dd565b61146081611a15565b82525050565b600061147182611a03565b61147b8185611a07565b93508360208202850161148d856119fd565b8060005b858110156114c757848403895281516114aa858261144b565b94506114b5836119fd565b60209a909a0199925050600101611491565b5091979650505050505050565b61146081611a20565b60006114e882611a03565b6114f28185611a07565b9350611502818560208601611a3d565b61150b81611a69565b9093019392505050565b600061152082611a03565b61152a8185611a10565b935061153a818560208601611a3d565b9290920192915050565b6000611551603583611a07565b7f556e207574656e746520636f6e206c27696e646972697a7a6f2073706563696681527f696361746f206e6f6e2065272070726573656e74650000000000000000000000602082015260400192915050565b60006115b0605183611a07565b7f756e6f206f2070697520706172616d657472692068616e6e6f2076616c6f726581527f2065727261746f202861646472657373206e6f6e20636f727265747469206f2060208201527f68617368206e6f6e20636f726574746f29000000000000000000000000000000604082015260600192915050565b6000611635601683611a07565b7f51756573746f2068617368206e6f6e2065736973746500000000000000000000815260200192915050565b600061166e602783611a07565b7f756e6f206f2070697520706172616d657472692068616e6e6f2076616c6f72658152600160c81b662065727261746f02602082015260400192915050565b60006116ba602483611a07565b7f51756573746f206163636f756e7420efbfbd2067696120756e206f70657261748152600160e51b63037b932902602082015260400192915050565b6000611703602783611a07565b7f4e6f6e2065736973746520756e207574656e746520636f6e2071756573746f208152600160c81b666164647265737302602082015260400192915050565b600061174f601383611a07565b7f6e6f6e20736569206175746f72697a7a61746f00000000000000000000000000815260200192915050565b6000611788603083611a07565b7f556e207574656e746520636f6e206c27696e646972697a7a6f2073706563696681527f696361746f206e6f6e2065736973746500000000000000000000000000000000602082015260400192915050565b60006117e7601883611a07565b7f51756573746f2068617368206769efbfbd206573697374650000000000000000815260200192915050565b6000611820603683611a07565b7f556e207574656e746520636f6e206c27696e646972697a7a6f2073706563696681527f696361746f20652720676961272070726573656e746500000000000000000000602082015260400192915050565b6114608161126d565b60006108f78284611515565b602081016102648284611457565b602080825281016108f78184611466565b6020810161026482846114d4565b602080825281016108f781846114dd565b606080825281016118d681866114dd565b90506118e56020830185611457565b81810360408301526118f781846114dd565b95945050505050565b6020808252810161026481611544565b60208082528101610264816115a3565b6020808252810161026481611628565b6020808252810161026481611661565b60208082528101610264816116ad565b60208082528101610264816116f6565b6020808252810161026481611742565b602080825281016102648161177b565b60208082528101610264816117da565b6020808252810161026481611813565b602081016102648284611872565b60405181810167ffffffffffffffff811182821017156119cd57600080fd5b604052919050565b600067ffffffffffffffff8211156119ec57600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b919050565b600061026482611a25565b151590565b6001600160a01b031690565b82818337506000910152565b60005b83811015611a58578181015183820152602001611a40565b838111156106035750506000910152565b601f01601f191690565b611a7c81611a15565b811461124757600080fd5b611a7c81611a2056fea265627a7a723058208beb79bef3b0b347cbc466d7eb37af20c3f0fd78b6e2780e0c4e8344b7aaed4c6c6578706572696d656e74616cf50037";

    public static final String FUNC_ISEXIST = "isExist";

    public static final String FUNC_ISOPERATOR = "isOperator";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_REMOVE_USER = "remove_user";

    public static final String FUNC_EXISTHASH = "existHash";

    public static final String FUNC_GETENDORSEMENT = "getEndorsement";

    public static final String FUNC_SETOPERATOR = "setOperator";

    public static final String FUNC_ADDENDORSEMENTS = "addEndorsements";

    public static final String FUNC_ADDDOCUMENT = "addDocument";

    public static final String FUNC_GETHASHLIST = "getHashList";

    public static final String FUNC_REMOVEENDORSEMENT = "removeEndorsement";

    public static final String FUNC_REMOVEDOCUMENT = "removeDocument";

    public static final String FUNC_GETDOCUMENTNUMBER = "getDocumentNumber";

    @Deprecated
    protected SignUpRegistry(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SignUpRegistry(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SignUpRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SignUpRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Boolean> isExist(String _user) {
        final Function function = new Function(FUNC_ISEXIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> isOperator(String _user) {
        final Function function = new Function(FUNC_ISOPERATOR,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> addUser(String _address, Boolean operator) {
        final Function function = new Function(
                FUNC_ADDUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address),
                        new org.web3j.abi.datatypes.Bool(operator)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> remove_user(String _address) {
        final Function function = new Function(
                FUNC_REMOVE_USER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> existHash(String user, String _hash) {
        final Function function = new Function(FUNC_EXISTHASH,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user),
                        new org.web3j.abi.datatypes.Utf8String(_hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> getEndorsement(String user, String user_give_like, String _hash) {
        final Function function = new Function(FUNC_GETENDORSEMENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user),
                        new org.web3j.abi.datatypes.Address(user_give_like),
                        new org.web3j.abi.datatypes.Utf8String(_hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setOperator(String _address) {
        final Function function = new Function(
                FUNC_SETOPERATOR,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addEndorsements(String user, String user_give_like, String _hash) {
        final Function function = new Function(
                FUNC_ADDENDORSEMENTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user),
                        new org.web3j.abi.datatypes.Address(user_give_like),
                        new org.web3j.abi.datatypes.Utf8String(_hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addDocument(String _user, String _hash, String eSK) {
        final Function function = new Function(
                FUNC_ADDDOCUMENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_user),
                        new org.web3j.abi.datatypes.Utf8String(_hash),
                        new org.web3j.abi.datatypes.Utf8String(eSK)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getHashList(String _user) {
        final Function function = new Function(FUNC_GETHASHLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> removeEndorsement(String user, String user_give_like, String _hash) {
        final Function function = new Function(
                FUNC_REMOVEENDORSEMENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user),
                        new org.web3j.abi.datatypes.Address(user_give_like),
                        new org.web3j.abi.datatypes.Utf8String(_hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeDocument(String _user, String _hash) {
        final Function function = new Function(
                FUNC_REMOVEDOCUMENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_user),
                        new org.web3j.abi.datatypes.Utf8String(_hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getDocumentNumber(String _user) {
        final Function function = new Function(FUNC_GETDOCUMENTNUMBER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static SignUpRegistry load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SignUpRegistry(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SignUpRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SignUpRegistry(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SignUpRegistry load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SignUpRegistry(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SignUpRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SignUpRegistry(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SignUpRegistry> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String contractAcl, String contractOpereator) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(contractAcl),
                new org.web3j.abi.datatypes.Address(contractOpereator)));
        return deployRemoteCall(SignUpRegistry.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SignUpRegistry> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String contractAcl, String contractOpereator) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(contractAcl),
                new org.web3j.abi.datatypes.Address(contractOpereator)));
        return deployRemoteCall(SignUpRegistry.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SignUpRegistry> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String contractAcl, String contractOpereator) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(contractAcl),
                new org.web3j.abi.datatypes.Address(contractOpereator)));
        return deployRemoteCall(SignUpRegistry.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SignUpRegistry> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String contractAcl, String contractOpereator) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(contractAcl),
                new org.web3j.abi.datatypes.Address(contractOpereator)));
        return deployRemoteCall(SignUpRegistry.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
